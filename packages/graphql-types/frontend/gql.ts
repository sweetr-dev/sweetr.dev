/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n          query TeamAlerts($workspaceId: SweetID!, $teamId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                alerts {\n                  type\n                  enabled\n                }\n              }\n            }\n          }\n        ": types.TeamAlertsDocument,
    "\n          query TeamAlert(\n            $workspaceId: SweetID!\n            $teamId: SweetID!\n            $input: AlertQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                alert(input: $input) {\n                  type\n                  enabled\n                  channel\n                  settings\n                }\n              }\n            }\n          }\n        ": types.TeamAlertDocument,
    "\n          mutation UpdateAlert($input: UpdateAlertInput!) {\n            updateAlert(input: $input) {\n              type\n              enabled\n            }\n          }\n        ": types.UpdateAlertDocument,
    "\n          query WorkspaceApiKey($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              apiKey {\n                id\n                createdAt\n                lastUsedAt\n                creator {\n                  id\n                  handle\n                  name\n                }\n              }\n            }\n          }\n        ": types.WorkspaceApiKeyDocument,
    "\n          mutation RegenerateApiKey($input: RegenerateApiKeyInput!) {\n            regenerateApiKey(input: $input)\n          }\n        ": types.RegenerateApiKeyDocument,
    "\n          query Application($workspaceId: SweetID!, $applicationId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              application(applicationId: $applicationId) {\n                id\n                name\n                description\n                team {\n                  id\n                  name\n                  icon\n                }\n                repository {\n                  id\n                  name\n                }\n                deploymentSettings {\n                  trigger\n                  subdirectory\n                }\n              }\n            }\n          }\n        ": types.ApplicationDocument,
    "\n          query ApplicationOptions(\n            $workspaceId: SweetID!\n            $input: ApplicationsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              applications(input: $input) {\n                id\n                name\n                description\n                team {\n                  id\n                  name\n                  icon\n                }\n              }\n            }\n          }\n        ": types.ApplicationOptionsDocument,
    "\n          query Applications(\n            $workspaceId: SweetID!\n            $input: ApplicationsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              applications(input: $input) {\n                id\n                name\n                description\n                team {\n                  id\n                  name\n                  icon\n                  startColor\n                  endColor\n                }\n                repository {\n                  id\n                  fullName\n                }\n                lastProductionDeployment {\n                  id\n                  version\n                  deployedAt\n                }\n              }\n            }\n          }\n        ": types.ApplicationsDocument,
    "\n          mutation UpsertApplication($input: UpsertApplicationInput!) {\n            upsertApplication(input: $input) {\n              id\n            }\n          }\n        ": types.UpsertApplicationDocument,
    "\n          mutation LoginWithGithub($input: LoginWithGithubInput!) {\n            loginWithGithub(input: $input) {\n              token {\n                accessToken\n              }\n            }\n          }\n        ": types.LoginWithGithubDocument,
    "\n          query AuthProvider($input: AuthProviderInput!) {\n            authProvider(input: $input) {\n              redirectUrl\n            }\n          }\n        ": types.AuthProviderDocument,
    "\n          query WorkspaceAutomation(\n            $workspaceId: SweetID!\n            $input: AutomationQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              automation(input: $input) {\n                type\n                enabled\n                settings\n              }\n            }\n          }\n        ": types.WorkspaceAutomationDocument,
    "\n          query WorkspaceAutomations($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              automations {\n                type\n                enabled\n              }\n            }\n          }\n        ": types.WorkspaceAutomationsDocument,
    "\n          mutation UpdateAutomation($input: UpdateAutomationInput!) {\n            updateAutomation(input: $input) {\n              type\n              enabled\n              settings\n            }\n          }\n        ": types.UpdateAutomationDocument,
    "\n          query Billing($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              billing {\n                purchasablePlans {\n                  cloud {\n                    monthly\n                    yearly\n                  }\n                }\n                estimatedSeats\n              }\n            }\n          }\n        ": types.BillingDocument,
    "\n          mutation LoginToStripe($input: LoginToStripeInput!) {\n            loginToStripe(input: $input)\n          }\n        ": types.LoginToStripeDocument,
    "\n          query ChartTimeToMerge(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeToMerge {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        ": types.ChartTimeToMergeDocument,
    "\n          query ChartTimeToFirstReview(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeForFirstReview {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        ": types.ChartTimeToFirstReviewDocument,
    "\n          query ChartTimeToApproval(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeForApproval {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        ": types.ChartTimeToApprovalDocument,
    "\n          query ChartCycleTime(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                cycleTime {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        ": types.ChartCycleTimeDocument,
    "\n          query PullRequestSizeDistribution(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                pullRequestSizeDistribution {\n                  columns\n                  series {\n                    name\n                    data\n                    color\n                  }\n                }\n              }\n            }\n          }\n        ": types.PullRequestSizeDistributionDocument,
    "\n          query ChartCodeReviewDistribution(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                codeReviewDistribution {\n                  entities {\n                    id\n                    name\n                    image\n                    reviewCount\n                    reviewSharePercentage\n                  }\n                  links {\n                    source\n                    target\n                    value\n                  }\n                  totalReviews\n                }\n              }\n            }\n          }\n        ": types.ChartCodeReviewDistributionDocument,
    "\n          query PersonCodeReviews(\n            $workspaceId: SweetID!\n            $handle: String!\n            $input: CodeReviewsInput\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                codeReviews(input: $input) {\n                  id\n                  state\n                  commentCount\n                  createdAt\n                  author {\n                    id\n                    name\n                    handle\n                    avatar\n                  }\n                  pullRequest {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      firstReviewAt\n                      timeToFirstReview\n                    }\n                    author {\n                      id\n                      name\n                      handle\n                      avatar\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        ": types.PersonCodeReviewsDocument,
    "\n          query DeploymentOptions(\n            $workspaceId: SweetID!\n            $input: DeploymentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              deployments(input: $input) {\n                id\n                description\n                version\n                deployedAt\n                application {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        ": types.DeploymentOptionsDocument,
    "\n          query Deployments(\n            $workspaceId: SweetID!\n            $input: DeploymentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              deployments(input: $input) {\n                id\n                application {\n                  id\n                  name\n                }\n                environment {\n                  name\n                  isProduction\n                }\n                author {\n                  id\n                  name\n                  avatar\n                }\n                version\n                description\n                deployedAt\n                archivedAt\n                pullRequestCount\n              }\n            }\n          }\n        ": types.DeploymentsDocument,
    "\n          query Deployment($workspaceId: SweetID!, $deploymentId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              deployment(deploymentId: $deploymentId) {\n                id\n                application {\n                  id\n                  name\n                  repository {\n                    fullName\n                  }\n                }\n                environment {\n                  name\n                  isProduction\n                }\n                author {\n                  id\n                  name\n                  avatar\n                }\n                version\n                description\n                deployedAt\n                archivedAt\n                pullRequests {\n                  id\n                  title\n                  gitUrl\n                  commentCount\n                  changedFilesCount\n                  linesAddedCount\n                  linesDeletedCount\n                  state\n                  createdAt\n                  mergedAt\n                  closedAt\n                  tracking {\n                    size\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    timeToFirstReview\n                    timeToMerge\n                    timeToFirstApproval\n                    firstReviewAt\n                    firstApprovalAt\n                  }\n                  author {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                  repository {\n                    id\n                    name\n                    fullName\n                  }\n                }\n              }\n            }\n          }\n        ": types.DeploymentDocument,
    "\n          query TeamDigests($workspaceId: SweetID!, $teamId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                digests {\n                  type\n                  enabled\n                }\n              }\n            }\n          }\n        ": types.TeamDigestsDocument,
    "\n          query TeamDigest(\n            $workspaceId: SweetID!\n            $teamId: SweetID!\n            $input: DigestQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                digest(input: $input) {\n                  type\n                  enabled\n                  channel\n                  frequency\n                  dayOfTheWeek\n                  timeOfDay\n                  timezone\n                  settings\n                }\n              }\n            }\n          }\n        ": types.TeamDigestDocument,
    "\n          mutation UpdateDigest($input: UpdateDigestInput!) {\n            updateDigest(input: $input) {\n              type\n              enabled\n            }\n          }\n        ": types.UpdateDigestDocument,
    "\n          query EnvironmentOptions(\n            $workspaceId: SweetID!\n            $input: EnvironmentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              environments(input: $input) {\n                id\n                name\n                isProduction\n              }\n            }\n          }\n        ": types.EnvironmentOptionsDocument,
    "\n          query Environments(\n            $workspaceId: SweetID!\n            $input: EnvironmentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              environments(input: $input) {\n                id\n                name\n                isProduction\n                archivedAt\n              }\n            }\n          }\n        ": types.EnvironmentsDocument,
    "\n          mutation ArchiveEnvironment($input: ArchiveEnvironmentInput!) {\n            archiveEnvironment(input: $input) {\n              id\n              name\n              isProduction\n              archivedAt\n            }\n          }\n        ": types.ArchiveEnvironmentDocument,
    "\n          mutation UnarchiveEnvironment($input: UnarchiveEnvironmentInput!) {\n            unarchiveEnvironment(input: $input) {\n              id\n              name\n              isProduction\n              archivedAt\n            }\n          }\n        ": types.UnarchiveEnvironmentDocument,
    "\n          query Incidents(\n            $workspaceId: SweetID!\n            $input: IncidentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              incidents(input: $input) {\n                id\n                team {\n                  id\n                  name\n                  icon\n                }\n                leader {\n                  id\n                  name\n                  avatar\n                }\n                detectedAt\n                resolvedAt\n                postmortemUrl\n                archivedAt\n                causeDeployment {\n                  id\n                  version\n                  application {\n                    id\n                    name\n                  }\n                }\n                fixDeployment {\n                  id\n                  version\n                  application {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n        ": types.IncidentsDocument,
    "\n          query Incident($workspaceId: SweetID!, $incidentId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              incident(incidentId: $incidentId) {\n                id\n                team {\n                  id\n                  name\n                  icon\n                }\n                leader {\n                  id\n                  name\n                  avatar\n                }\n                detectedAt\n                resolvedAt\n                postmortemUrl\n                causeDeployment {\n                  id\n                  version\n                  application {\n                    id\n                    name\n                  }\n                }\n                fixDeployment {\n                  id\n                  version\n                  application {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n        ": types.IncidentDocument,
    "\n          mutation UpsertIncident($input: UpsertIncidentInput!) {\n            upsertIncident(input: $input) {\n              id\n            }\n          }\n        ": types.UpsertIncidentDocument,
    "\n          query WorkspaceIntegrations($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              integrations {\n                app\n                isEnabled\n                installUrl\n                enabledAt\n                target\n              }\n            }\n          }\n        ": types.WorkspaceIntegrationsDocument,
    "\n          mutation InstallIntegration($input: InstallIntegrationInput!) {\n            installIntegration(input: $input)\n          }\n        ": types.InstallIntegrationDocument,
    "\n          mutation RemoveIntegration($input: RemoveIntegrationInput!) {\n            removeIntegration(input: $input)\n          }\n        ": types.RemoveIntegrationDocument,
    "\n          mutation SendTestMessage($input: SendTestMessageInput!) {\n            sendTestMessage(input: $input)\n          }\n        ": types.SendTestMessageDocument,
    "\n          query People($workspaceId: SweetID!, $input: PeopleQueryInput) {\n            workspace(workspaceId: $workspaceId) {\n              people(input: $input) {\n                id\n                name\n                handle\n                avatar\n              }\n            }\n          }\n        ": types.PeopleDocument,
    "\n          query Person($workspaceId: SweetID!, $handle: String!) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                id\n                name\n                handle\n                avatar\n                teamMemberships {\n                  id\n                  role\n                  team {\n                    id\n                    name\n                    icon\n                  }\n                }\n              }\n            }\n          }\n        ": types.PersonDocument,
    "\n          query PersonalMetrics($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              me {\n                personalMetrics {\n                  pullRequestSize {\n                    current\n                    previous\n                    change\n                  }\n                  codeReviewAmount {\n                    current\n                    previous\n                    change\n                  }\n                }\n              }\n            }\n          }\n        ": types.PersonalMetricsDocument,
    "\n          query PullRequests(\n            $workspaceId: SweetID!\n            $input: PullRequestsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              pullRequests(input: $input) {\n                id\n                title\n                gitUrl\n                commentCount\n                changedFilesCount\n                linesAddedCount\n                linesDeletedCount\n                state\n                createdAt\n                mergedAt\n                closedAt\n                tracking {\n                  size\n                  changedFilesCount\n                  linesAddedCount\n                  linesDeletedCount\n                  timeToFirstReview\n                  timeToMerge\n                  timeToFirstApproval\n                  firstReviewAt\n                  firstApprovalAt\n                }\n                author {\n                  id\n                  avatar\n                  handle\n                  name\n                }\n                repository {\n                  id\n                  name\n                  fullName\n                }\n              }\n            }\n          }\n        ": types.PullRequestsDocument,
    "\n          query Repositories(\n            $workspaceId: SweetID!\n            $input: RepositoriesQueryInput\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              repositories(input: $input) {\n                id\n                name\n                fullName\n              }\n            }\n          }\n        ": types.RepositoriesDocument,
    "\n          query Spotlight(\n            $workspaceId: SweetID!\n            $peopleInput: PeopleQueryInput!\n            $teamsInput: TeamsQueryInput!\n            $repositoriesInput: RepositoriesQueryInput!\n            $applicationsInput: ApplicationsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              people(input: $peopleInput) {\n                id\n                avatar\n                handle\n                name\n              }\n              teams(input: $teamsInput) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n              }\n              repositories(input: $repositoriesInput) {\n                id\n                name\n                fullName\n              }\n              applications(input: $applicationsInput) {\n                id\n                name\n                description\n              }\n            }\n          }\n        ": types.SpotlightDocument,
    "\n          query Teams($workspaceId: SweetID!, $input: TeamsQueryInput) {\n            workspace(workspaceId: $workspaceId) {\n              teams(input: $input) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n                archivedAt\n                members {\n                  id\n                  person {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                }\n              }\n            }\n          }\n        ": types.TeamsDocument,
    "\n          query Team($workspaceId: SweetID!, $teamId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n                archivedAt\n                members {\n                  id\n                  role\n                  person {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                }\n              }\n            }\n          }\n        ": types.TeamDocument,
    "\n          query TeamOptions($workspaceId: SweetID!, $input: TeamsQueryInput!) {\n            workspace(workspaceId: $workspaceId) {\n              teams(input: $input) {\n                id\n                name\n                icon\n              }\n            }\n          }\n        ": types.TeamOptionsDocument,
    "\n          query TeamPullRequestsInProgress(\n            $workspaceId: SweetID!\n            $teamId: SweetID!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              id\n              team(teamId: $teamId) {\n                id\n                pullRequestsInProgress {\n                  drafted {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    state\n                    createdAt\n                    mergedAt\n                    closedAt\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      timeToFirstReview\n                      timeToMerge\n                      timeToFirstApproval\n                      firstReviewAt\n                      firstApprovalAt\n                    }\n                    author {\n                      id\n                      avatar\n                      handle\n                      name\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                  pendingReview {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    state\n                    createdAt\n                    mergedAt\n                    closedAt\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      timeToFirstReview\n                      timeToMerge\n                      timeToFirstApproval\n                      firstReviewAt\n                      firstApprovalAt\n                    }\n                    author {\n                      id\n                      avatar\n                      handle\n                      name\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                  changesRequested {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    state\n                    createdAt\n                    mergedAt\n                    closedAt\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      timeToFirstReview\n                      timeToMerge\n                      timeToFirstApproval\n                      firstReviewAt\n                      firstApprovalAt\n                    }\n                    author {\n                      id\n                      avatar\n                      handle\n                      name\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                  pendingMerge {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    state\n                    createdAt\n                    mergedAt\n                    closedAt\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      timeToFirstReview\n                      timeToMerge\n                      timeToFirstApproval\n                      firstReviewAt\n                      firstApprovalAt\n                    }\n                    author {\n                      id\n                      avatar\n                      handle\n                      name\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        ": types.TeamPullRequestsInProgressDocument,
    "\n          query Teammates($workspaceId: SweetID!, $handle: String!) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                id\n                teammates {\n                  id\n                  person {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        ": types.TeammatesDocument,
    "\n          mutation UpsertTeam($input: UpsertTeamInput!) {\n            upsertTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        ": types.UpsertTeamDocument,
    "\n          mutation ArchiveTeam($input: ArchiveTeamInput!) {\n            archiveTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        ": types.ArchiveTeamDocument,
    "\n          mutation UnarchiveTeam($input: UnarchiveTeamInput!) {\n            unarchiveTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        ": types.UnarchiveTeamDocument,
    "\n          query TeamWorkLog(\n            $workspaceId: SweetID!\n            $teamId: SweetID!\n            $input: TeamWorkLogInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                members {\n                  id\n                  role\n                  person {\n                    id\n                    name\n                    handle\n                    avatar\n                  }\n                }\n                workLog(input: $input) {\n                  columns\n                  data {\n                    __typename\n                    ... on CodeReviewSubmittedEvent {\n                      eventAt\n                      codeReview {\n                        id\n                        state\n                        commentCount\n                        createdAt\n                        author {\n                          id\n                          name\n                          handle\n                          avatar\n                        }\n                        pullRequest {\n                          id\n                          title\n                          gitUrl\n                          commentCount\n                          changedFilesCount\n                          linesAddedCount\n                          linesDeletedCount\n                          state\n                          createdAt\n                          mergedAt\n                          closedAt\n                          tracking {\n                            size\n                            changedFilesCount\n                            linesAddedCount\n                            linesDeletedCount\n                            timeToFirstReview\n                            timeToMerge\n                            timeToFirstApproval\n                            firstReviewAt\n                            firstApprovalAt\n                          }\n                          author {\n                            id\n                            avatar\n                            handle\n                            name\n                          }\n                          repository {\n                            id\n                            name\n                            fullName\n                          }\n                        }\n                      }\n                    }\n                    ... on PullRequestCreatedEvent {\n                      eventAt\n                      pullRequest {\n                        id\n                        title\n                        gitUrl\n                        commentCount\n                        changedFilesCount\n                        linesAddedCount\n                        linesDeletedCount\n                        state\n                        createdAt\n                        mergedAt\n                        closedAt\n                        tracking {\n                          size\n                          changedFilesCount\n                          linesAddedCount\n                          linesDeletedCount\n                          timeToFirstReview\n                          timeToMerge\n                          timeToFirstApproval\n                          firstReviewAt\n                          firstApprovalAt\n                        }\n                        author {\n                          id\n                          avatar\n                          handle\n                          name\n                        }\n                        repository {\n                          id\n                          name\n                          fullName\n                        }\n                      }\n                    }\n                    ... on PullRequestMergedEvent {\n                      eventAt\n                      pullRequest {\n                        id\n                        title\n                        gitUrl\n                        commentCount\n                        changedFilesCount\n                        linesAddedCount\n                        linesDeletedCount\n                        state\n                        createdAt\n                        mergedAt\n                        closedAt\n                        tracking {\n                          size\n                          changedFilesCount\n                          linesAddedCount\n                          linesDeletedCount\n                          timeToFirstReview\n                          timeToMerge\n                          timeToFirstApproval\n                          firstReviewAt\n                          firstApprovalAt\n                        }\n                        author {\n                          id\n                          avatar\n                          handle\n                          name\n                        }\n                        repository {\n                          id\n                          name\n                          fullName\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        ": types.TeamWorkLogDocument,
    "\n        query UserWorkspaces {\n          userWorkspaces {\n            id\n            name\n            avatar\n            handle\n            gitUninstallUrl\n            me {\n              id\n              handle\n              name\n              avatar\n              email\n            }\n            billing {\n              trial {\n                endAt\n              }\n              subscription {\n                isActive\n              }\n            }\n            isActiveCustomer\n          }\n        }\n      ": types.UserWorkspacesDocument,
    "\n          query WorkspaceByInstallationId($gitInstallationId: String!) {\n            workspaceByInstallationId(gitInstallationId: $gitInstallationId) {\n              id\n              name\n              avatar\n              handle\n              gitUninstallUrl\n              isActiveCustomer\n              repositories {\n                id\n              }\n            }\n          }\n        ": types.WorkspaceByInstallationIdDocument,
    "\n          query WorkspaceSyncProgress($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              initialSyncProgress\n            }\n          }\n        ": types.WorkspaceSyncProgressDocument,
    "\n          query WorkspaceSettings($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              id\n              settings {\n                pullRequest {\n                  size {\n                    tiny\n                    small\n                    medium\n                    large\n                    ignorePatterns\n                  }\n                }\n              }\n            }\n          }\n        ": types.WorkspaceSettingsDocument,
    "\n          mutation UpdateWorkspaceSettings(\n            $input: UpdateWorkspaceSettingsInput!\n          ) {\n            updateWorkspaceSettings(input: $input) {\n              id\n              settings {\n                pullRequest {\n                  size {\n                    tiny\n                    small\n                    medium\n                    large\n                  }\n                }\n              }\n            }\n          }\n        ": types.UpdateWorkspaceSettingsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query TeamAlerts($workspaceId: SweetID!, $teamId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                alerts {\n                  type\n                  enabled\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query TeamAlerts($workspaceId: SweetID!, $teamId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                alerts {\n                  type\n                  enabled\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query TeamAlert(\n            $workspaceId: SweetID!\n            $teamId: SweetID!\n            $input: AlertQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                alert(input: $input) {\n                  type\n                  enabled\n                  channel\n                  settings\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query TeamAlert(\n            $workspaceId: SweetID!\n            $teamId: SweetID!\n            $input: AlertQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                alert(input: $input) {\n                  type\n                  enabled\n                  channel\n                  settings\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation UpdateAlert($input: UpdateAlertInput!) {\n            updateAlert(input: $input) {\n              type\n              enabled\n            }\n          }\n        "): (typeof documents)["\n          mutation UpdateAlert($input: UpdateAlertInput!) {\n            updateAlert(input: $input) {\n              type\n              enabled\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query WorkspaceApiKey($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              apiKey {\n                id\n                createdAt\n                lastUsedAt\n                creator {\n                  id\n                  handle\n                  name\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query WorkspaceApiKey($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              apiKey {\n                id\n                createdAt\n                lastUsedAt\n                creator {\n                  id\n                  handle\n                  name\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation RegenerateApiKey($input: RegenerateApiKeyInput!) {\n            regenerateApiKey(input: $input)\n          }\n        "): (typeof documents)["\n          mutation RegenerateApiKey($input: RegenerateApiKeyInput!) {\n            regenerateApiKey(input: $input)\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Application($workspaceId: SweetID!, $applicationId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              application(applicationId: $applicationId) {\n                id\n                name\n                description\n                team {\n                  id\n                  name\n                  icon\n                }\n                repository {\n                  id\n                  name\n                }\n                deploymentSettings {\n                  trigger\n                  subdirectory\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Application($workspaceId: SweetID!, $applicationId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              application(applicationId: $applicationId) {\n                id\n                name\n                description\n                team {\n                  id\n                  name\n                  icon\n                }\n                repository {\n                  id\n                  name\n                }\n                deploymentSettings {\n                  trigger\n                  subdirectory\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query ApplicationOptions(\n            $workspaceId: SweetID!\n            $input: ApplicationsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              applications(input: $input) {\n                id\n                name\n                description\n                team {\n                  id\n                  name\n                  icon\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query ApplicationOptions(\n            $workspaceId: SweetID!\n            $input: ApplicationsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              applications(input: $input) {\n                id\n                name\n                description\n                team {\n                  id\n                  name\n                  icon\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Applications(\n            $workspaceId: SweetID!\n            $input: ApplicationsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              applications(input: $input) {\n                id\n                name\n                description\n                team {\n                  id\n                  name\n                  icon\n                  startColor\n                  endColor\n                }\n                repository {\n                  id\n                  fullName\n                }\n                lastProductionDeployment {\n                  id\n                  version\n                  deployedAt\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Applications(\n            $workspaceId: SweetID!\n            $input: ApplicationsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              applications(input: $input) {\n                id\n                name\n                description\n                team {\n                  id\n                  name\n                  icon\n                  startColor\n                  endColor\n                }\n                repository {\n                  id\n                  fullName\n                }\n                lastProductionDeployment {\n                  id\n                  version\n                  deployedAt\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation UpsertApplication($input: UpsertApplicationInput!) {\n            upsertApplication(input: $input) {\n              id\n            }\n          }\n        "): (typeof documents)["\n          mutation UpsertApplication($input: UpsertApplicationInput!) {\n            upsertApplication(input: $input) {\n              id\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation LoginWithGithub($input: LoginWithGithubInput!) {\n            loginWithGithub(input: $input) {\n              token {\n                accessToken\n              }\n            }\n          }\n        "): (typeof documents)["\n          mutation LoginWithGithub($input: LoginWithGithubInput!) {\n            loginWithGithub(input: $input) {\n              token {\n                accessToken\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query AuthProvider($input: AuthProviderInput!) {\n            authProvider(input: $input) {\n              redirectUrl\n            }\n          }\n        "): (typeof documents)["\n          query AuthProvider($input: AuthProviderInput!) {\n            authProvider(input: $input) {\n              redirectUrl\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query WorkspaceAutomation(\n            $workspaceId: SweetID!\n            $input: AutomationQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              automation(input: $input) {\n                type\n                enabled\n                settings\n              }\n            }\n          }\n        "): (typeof documents)["\n          query WorkspaceAutomation(\n            $workspaceId: SweetID!\n            $input: AutomationQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              automation(input: $input) {\n                type\n                enabled\n                settings\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query WorkspaceAutomations($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              automations {\n                type\n                enabled\n              }\n            }\n          }\n        "): (typeof documents)["\n          query WorkspaceAutomations($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              automations {\n                type\n                enabled\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation UpdateAutomation($input: UpdateAutomationInput!) {\n            updateAutomation(input: $input) {\n              type\n              enabled\n              settings\n            }\n          }\n        "): (typeof documents)["\n          mutation UpdateAutomation($input: UpdateAutomationInput!) {\n            updateAutomation(input: $input) {\n              type\n              enabled\n              settings\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Billing($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              billing {\n                purchasablePlans {\n                  cloud {\n                    monthly\n                    yearly\n                  }\n                }\n                estimatedSeats\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Billing($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              billing {\n                purchasablePlans {\n                  cloud {\n                    monthly\n                    yearly\n                  }\n                }\n                estimatedSeats\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation LoginToStripe($input: LoginToStripeInput!) {\n            loginToStripe(input: $input)\n          }\n        "): (typeof documents)["\n          mutation LoginToStripe($input: LoginToStripeInput!) {\n            loginToStripe(input: $input)\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query ChartTimeToMerge(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeToMerge {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query ChartTimeToMerge(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeToMerge {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query ChartTimeToFirstReview(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeForFirstReview {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query ChartTimeToFirstReview(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeForFirstReview {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query ChartTimeToApproval(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeForApproval {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query ChartTimeToApproval(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeForApproval {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query ChartCycleTime(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                cycleTime {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query ChartCycleTime(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                cycleTime {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query PullRequestSizeDistribution(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                pullRequestSizeDistribution {\n                  columns\n                  series {\n                    name\n                    data\n                    color\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query PullRequestSizeDistribution(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                pullRequestSizeDistribution {\n                  columns\n                  series {\n                    name\n                    data\n                    color\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query ChartCodeReviewDistribution(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                codeReviewDistribution {\n                  entities {\n                    id\n                    name\n                    image\n                    reviewCount\n                    reviewSharePercentage\n                  }\n                  links {\n                    source\n                    target\n                    value\n                  }\n                  totalReviews\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query ChartCodeReviewDistribution(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                codeReviewDistribution {\n                  entities {\n                    id\n                    name\n                    image\n                    reviewCount\n                    reviewSharePercentage\n                  }\n                  links {\n                    source\n                    target\n                    value\n                  }\n                  totalReviews\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query PersonCodeReviews(\n            $workspaceId: SweetID!\n            $handle: String!\n            $input: CodeReviewsInput\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                codeReviews(input: $input) {\n                  id\n                  state\n                  commentCount\n                  createdAt\n                  author {\n                    id\n                    name\n                    handle\n                    avatar\n                  }\n                  pullRequest {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      firstReviewAt\n                      timeToFirstReview\n                    }\n                    author {\n                      id\n                      name\n                      handle\n                      avatar\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query PersonCodeReviews(\n            $workspaceId: SweetID!\n            $handle: String!\n            $input: CodeReviewsInput\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                codeReviews(input: $input) {\n                  id\n                  state\n                  commentCount\n                  createdAt\n                  author {\n                    id\n                    name\n                    handle\n                    avatar\n                  }\n                  pullRequest {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      firstReviewAt\n                      timeToFirstReview\n                    }\n                    author {\n                      id\n                      name\n                      handle\n                      avatar\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query DeploymentOptions(\n            $workspaceId: SweetID!\n            $input: DeploymentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              deployments(input: $input) {\n                id\n                description\n                version\n                deployedAt\n                application {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query DeploymentOptions(\n            $workspaceId: SweetID!\n            $input: DeploymentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              deployments(input: $input) {\n                id\n                description\n                version\n                deployedAt\n                application {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Deployments(\n            $workspaceId: SweetID!\n            $input: DeploymentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              deployments(input: $input) {\n                id\n                application {\n                  id\n                  name\n                }\n                environment {\n                  name\n                  isProduction\n                }\n                author {\n                  id\n                  name\n                  avatar\n                }\n                version\n                description\n                deployedAt\n                archivedAt\n                pullRequestCount\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Deployments(\n            $workspaceId: SweetID!\n            $input: DeploymentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              deployments(input: $input) {\n                id\n                application {\n                  id\n                  name\n                }\n                environment {\n                  name\n                  isProduction\n                }\n                author {\n                  id\n                  name\n                  avatar\n                }\n                version\n                description\n                deployedAt\n                archivedAt\n                pullRequestCount\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Deployment($workspaceId: SweetID!, $deploymentId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              deployment(deploymentId: $deploymentId) {\n                id\n                application {\n                  id\n                  name\n                  repository {\n                    fullName\n                  }\n                }\n                environment {\n                  name\n                  isProduction\n                }\n                author {\n                  id\n                  name\n                  avatar\n                }\n                version\n                description\n                deployedAt\n                archivedAt\n                pullRequests {\n                  id\n                  title\n                  gitUrl\n                  commentCount\n                  changedFilesCount\n                  linesAddedCount\n                  linesDeletedCount\n                  state\n                  createdAt\n                  mergedAt\n                  closedAt\n                  tracking {\n                    size\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    timeToFirstReview\n                    timeToMerge\n                    timeToFirstApproval\n                    firstReviewAt\n                    firstApprovalAt\n                  }\n                  author {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                  repository {\n                    id\n                    name\n                    fullName\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Deployment($workspaceId: SweetID!, $deploymentId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              deployment(deploymentId: $deploymentId) {\n                id\n                application {\n                  id\n                  name\n                  repository {\n                    fullName\n                  }\n                }\n                environment {\n                  name\n                  isProduction\n                }\n                author {\n                  id\n                  name\n                  avatar\n                }\n                version\n                description\n                deployedAt\n                archivedAt\n                pullRequests {\n                  id\n                  title\n                  gitUrl\n                  commentCount\n                  changedFilesCount\n                  linesAddedCount\n                  linesDeletedCount\n                  state\n                  createdAt\n                  mergedAt\n                  closedAt\n                  tracking {\n                    size\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    timeToFirstReview\n                    timeToMerge\n                    timeToFirstApproval\n                    firstReviewAt\n                    firstApprovalAt\n                  }\n                  author {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                  repository {\n                    id\n                    name\n                    fullName\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query TeamDigests($workspaceId: SweetID!, $teamId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                digests {\n                  type\n                  enabled\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query TeamDigests($workspaceId: SweetID!, $teamId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                digests {\n                  type\n                  enabled\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query TeamDigest(\n            $workspaceId: SweetID!\n            $teamId: SweetID!\n            $input: DigestQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                digest(input: $input) {\n                  type\n                  enabled\n                  channel\n                  frequency\n                  dayOfTheWeek\n                  timeOfDay\n                  timezone\n                  settings\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query TeamDigest(\n            $workspaceId: SweetID!\n            $teamId: SweetID!\n            $input: DigestQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                digest(input: $input) {\n                  type\n                  enabled\n                  channel\n                  frequency\n                  dayOfTheWeek\n                  timeOfDay\n                  timezone\n                  settings\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation UpdateDigest($input: UpdateDigestInput!) {\n            updateDigest(input: $input) {\n              type\n              enabled\n            }\n          }\n        "): (typeof documents)["\n          mutation UpdateDigest($input: UpdateDigestInput!) {\n            updateDigest(input: $input) {\n              type\n              enabled\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query EnvironmentOptions(\n            $workspaceId: SweetID!\n            $input: EnvironmentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              environments(input: $input) {\n                id\n                name\n                isProduction\n              }\n            }\n          }\n        "): (typeof documents)["\n          query EnvironmentOptions(\n            $workspaceId: SweetID!\n            $input: EnvironmentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              environments(input: $input) {\n                id\n                name\n                isProduction\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Environments(\n            $workspaceId: SweetID!\n            $input: EnvironmentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              environments(input: $input) {\n                id\n                name\n                isProduction\n                archivedAt\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Environments(\n            $workspaceId: SweetID!\n            $input: EnvironmentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              environments(input: $input) {\n                id\n                name\n                isProduction\n                archivedAt\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation ArchiveEnvironment($input: ArchiveEnvironmentInput!) {\n            archiveEnvironment(input: $input) {\n              id\n              name\n              isProduction\n              archivedAt\n            }\n          }\n        "): (typeof documents)["\n          mutation ArchiveEnvironment($input: ArchiveEnvironmentInput!) {\n            archiveEnvironment(input: $input) {\n              id\n              name\n              isProduction\n              archivedAt\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation UnarchiveEnvironment($input: UnarchiveEnvironmentInput!) {\n            unarchiveEnvironment(input: $input) {\n              id\n              name\n              isProduction\n              archivedAt\n            }\n          }\n        "): (typeof documents)["\n          mutation UnarchiveEnvironment($input: UnarchiveEnvironmentInput!) {\n            unarchiveEnvironment(input: $input) {\n              id\n              name\n              isProduction\n              archivedAt\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Incidents(\n            $workspaceId: SweetID!\n            $input: IncidentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              incidents(input: $input) {\n                id\n                team {\n                  id\n                  name\n                  icon\n                }\n                leader {\n                  id\n                  name\n                  avatar\n                }\n                detectedAt\n                resolvedAt\n                postmortemUrl\n                archivedAt\n                causeDeployment {\n                  id\n                  version\n                  application {\n                    id\n                    name\n                  }\n                }\n                fixDeployment {\n                  id\n                  version\n                  application {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Incidents(\n            $workspaceId: SweetID!\n            $input: IncidentsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              incidents(input: $input) {\n                id\n                team {\n                  id\n                  name\n                  icon\n                }\n                leader {\n                  id\n                  name\n                  avatar\n                }\n                detectedAt\n                resolvedAt\n                postmortemUrl\n                archivedAt\n                causeDeployment {\n                  id\n                  version\n                  application {\n                    id\n                    name\n                  }\n                }\n                fixDeployment {\n                  id\n                  version\n                  application {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Incident($workspaceId: SweetID!, $incidentId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              incident(incidentId: $incidentId) {\n                id\n                team {\n                  id\n                  name\n                  icon\n                }\n                leader {\n                  id\n                  name\n                  avatar\n                }\n                detectedAt\n                resolvedAt\n                postmortemUrl\n                causeDeployment {\n                  id\n                  version\n                  application {\n                    id\n                    name\n                  }\n                }\n                fixDeployment {\n                  id\n                  version\n                  application {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Incident($workspaceId: SweetID!, $incidentId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              incident(incidentId: $incidentId) {\n                id\n                team {\n                  id\n                  name\n                  icon\n                }\n                leader {\n                  id\n                  name\n                  avatar\n                }\n                detectedAt\n                resolvedAt\n                postmortemUrl\n                causeDeployment {\n                  id\n                  version\n                  application {\n                    id\n                    name\n                  }\n                }\n                fixDeployment {\n                  id\n                  version\n                  application {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation UpsertIncident($input: UpsertIncidentInput!) {\n            upsertIncident(input: $input) {\n              id\n            }\n          }\n        "): (typeof documents)["\n          mutation UpsertIncident($input: UpsertIncidentInput!) {\n            upsertIncident(input: $input) {\n              id\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query WorkspaceIntegrations($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              integrations {\n                app\n                isEnabled\n                installUrl\n                enabledAt\n                target\n              }\n            }\n          }\n        "): (typeof documents)["\n          query WorkspaceIntegrations($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              integrations {\n                app\n                isEnabled\n                installUrl\n                enabledAt\n                target\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation InstallIntegration($input: InstallIntegrationInput!) {\n            installIntegration(input: $input)\n          }\n        "): (typeof documents)["\n          mutation InstallIntegration($input: InstallIntegrationInput!) {\n            installIntegration(input: $input)\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation RemoveIntegration($input: RemoveIntegrationInput!) {\n            removeIntegration(input: $input)\n          }\n        "): (typeof documents)["\n          mutation RemoveIntegration($input: RemoveIntegrationInput!) {\n            removeIntegration(input: $input)\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation SendTestMessage($input: SendTestMessageInput!) {\n            sendTestMessage(input: $input)\n          }\n        "): (typeof documents)["\n          mutation SendTestMessage($input: SendTestMessageInput!) {\n            sendTestMessage(input: $input)\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query People($workspaceId: SweetID!, $input: PeopleQueryInput) {\n            workspace(workspaceId: $workspaceId) {\n              people(input: $input) {\n                id\n                name\n                handle\n                avatar\n              }\n            }\n          }\n        "): (typeof documents)["\n          query People($workspaceId: SweetID!, $input: PeopleQueryInput) {\n            workspace(workspaceId: $workspaceId) {\n              people(input: $input) {\n                id\n                name\n                handle\n                avatar\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Person($workspaceId: SweetID!, $handle: String!) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                id\n                name\n                handle\n                avatar\n                teamMemberships {\n                  id\n                  role\n                  team {\n                    id\n                    name\n                    icon\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Person($workspaceId: SweetID!, $handle: String!) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                id\n                name\n                handle\n                avatar\n                teamMemberships {\n                  id\n                  role\n                  team {\n                    id\n                    name\n                    icon\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query PersonalMetrics($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              me {\n                personalMetrics {\n                  pullRequestSize {\n                    current\n                    previous\n                    change\n                  }\n                  codeReviewAmount {\n                    current\n                    previous\n                    change\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query PersonalMetrics($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              me {\n                personalMetrics {\n                  pullRequestSize {\n                    current\n                    previous\n                    change\n                  }\n                  codeReviewAmount {\n                    current\n                    previous\n                    change\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query PullRequests(\n            $workspaceId: SweetID!\n            $input: PullRequestsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              pullRequests(input: $input) {\n                id\n                title\n                gitUrl\n                commentCount\n                changedFilesCount\n                linesAddedCount\n                linesDeletedCount\n                state\n                createdAt\n                mergedAt\n                closedAt\n                tracking {\n                  size\n                  changedFilesCount\n                  linesAddedCount\n                  linesDeletedCount\n                  timeToFirstReview\n                  timeToMerge\n                  timeToFirstApproval\n                  firstReviewAt\n                  firstApprovalAt\n                }\n                author {\n                  id\n                  avatar\n                  handle\n                  name\n                }\n                repository {\n                  id\n                  name\n                  fullName\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query PullRequests(\n            $workspaceId: SweetID!\n            $input: PullRequestsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              pullRequests(input: $input) {\n                id\n                title\n                gitUrl\n                commentCount\n                changedFilesCount\n                linesAddedCount\n                linesDeletedCount\n                state\n                createdAt\n                mergedAt\n                closedAt\n                tracking {\n                  size\n                  changedFilesCount\n                  linesAddedCount\n                  linesDeletedCount\n                  timeToFirstReview\n                  timeToMerge\n                  timeToFirstApproval\n                  firstReviewAt\n                  firstApprovalAt\n                }\n                author {\n                  id\n                  avatar\n                  handle\n                  name\n                }\n                repository {\n                  id\n                  name\n                  fullName\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Repositories(\n            $workspaceId: SweetID!\n            $input: RepositoriesQueryInput\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              repositories(input: $input) {\n                id\n                name\n                fullName\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Repositories(\n            $workspaceId: SweetID!\n            $input: RepositoriesQueryInput\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              repositories(input: $input) {\n                id\n                name\n                fullName\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Spotlight(\n            $workspaceId: SweetID!\n            $peopleInput: PeopleQueryInput!\n            $teamsInput: TeamsQueryInput!\n            $repositoriesInput: RepositoriesQueryInput!\n            $applicationsInput: ApplicationsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              people(input: $peopleInput) {\n                id\n                avatar\n                handle\n                name\n              }\n              teams(input: $teamsInput) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n              }\n              repositories(input: $repositoriesInput) {\n                id\n                name\n                fullName\n              }\n              applications(input: $applicationsInput) {\n                id\n                name\n                description\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Spotlight(\n            $workspaceId: SweetID!\n            $peopleInput: PeopleQueryInput!\n            $teamsInput: TeamsQueryInput!\n            $repositoriesInput: RepositoriesQueryInput!\n            $applicationsInput: ApplicationsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              people(input: $peopleInput) {\n                id\n                avatar\n                handle\n                name\n              }\n              teams(input: $teamsInput) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n              }\n              repositories(input: $repositoriesInput) {\n                id\n                name\n                fullName\n              }\n              applications(input: $applicationsInput) {\n                id\n                name\n                description\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Teams($workspaceId: SweetID!, $input: TeamsQueryInput) {\n            workspace(workspaceId: $workspaceId) {\n              teams(input: $input) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n                archivedAt\n                members {\n                  id\n                  person {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Teams($workspaceId: SweetID!, $input: TeamsQueryInput) {\n            workspace(workspaceId: $workspaceId) {\n              teams(input: $input) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n                archivedAt\n                members {\n                  id\n                  person {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Team($workspaceId: SweetID!, $teamId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n                archivedAt\n                members {\n                  id\n                  role\n                  person {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Team($workspaceId: SweetID!, $teamId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n                archivedAt\n                members {\n                  id\n                  role\n                  person {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query TeamOptions($workspaceId: SweetID!, $input: TeamsQueryInput!) {\n            workspace(workspaceId: $workspaceId) {\n              teams(input: $input) {\n                id\n                name\n                icon\n              }\n            }\n          }\n        "): (typeof documents)["\n          query TeamOptions($workspaceId: SweetID!, $input: TeamsQueryInput!) {\n            workspace(workspaceId: $workspaceId) {\n              teams(input: $input) {\n                id\n                name\n                icon\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query TeamPullRequestsInProgress(\n            $workspaceId: SweetID!\n            $teamId: SweetID!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              id\n              team(teamId: $teamId) {\n                id\n                pullRequestsInProgress {\n                  drafted {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    state\n                    createdAt\n                    mergedAt\n                    closedAt\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      timeToFirstReview\n                      timeToMerge\n                      timeToFirstApproval\n                      firstReviewAt\n                      firstApprovalAt\n                    }\n                    author {\n                      id\n                      avatar\n                      handle\n                      name\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                  pendingReview {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    state\n                    createdAt\n                    mergedAt\n                    closedAt\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      timeToFirstReview\n                      timeToMerge\n                      timeToFirstApproval\n                      firstReviewAt\n                      firstApprovalAt\n                    }\n                    author {\n                      id\n                      avatar\n                      handle\n                      name\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                  changesRequested {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    state\n                    createdAt\n                    mergedAt\n                    closedAt\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      timeToFirstReview\n                      timeToMerge\n                      timeToFirstApproval\n                      firstReviewAt\n                      firstApprovalAt\n                    }\n                    author {\n                      id\n                      avatar\n                      handle\n                      name\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                  pendingMerge {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    state\n                    createdAt\n                    mergedAt\n                    closedAt\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      timeToFirstReview\n                      timeToMerge\n                      timeToFirstApproval\n                      firstReviewAt\n                      firstApprovalAt\n                    }\n                    author {\n                      id\n                      avatar\n                      handle\n                      name\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query TeamPullRequestsInProgress(\n            $workspaceId: SweetID!\n            $teamId: SweetID!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              id\n              team(teamId: $teamId) {\n                id\n                pullRequestsInProgress {\n                  drafted {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    state\n                    createdAt\n                    mergedAt\n                    closedAt\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      timeToFirstReview\n                      timeToMerge\n                      timeToFirstApproval\n                      firstReviewAt\n                      firstApprovalAt\n                    }\n                    author {\n                      id\n                      avatar\n                      handle\n                      name\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                  pendingReview {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    state\n                    createdAt\n                    mergedAt\n                    closedAt\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      timeToFirstReview\n                      timeToMerge\n                      timeToFirstApproval\n                      firstReviewAt\n                      firstApprovalAt\n                    }\n                    author {\n                      id\n                      avatar\n                      handle\n                      name\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                  changesRequested {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    state\n                    createdAt\n                    mergedAt\n                    closedAt\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      timeToFirstReview\n                      timeToMerge\n                      timeToFirstApproval\n                      firstReviewAt\n                      firstApprovalAt\n                    }\n                    author {\n                      id\n                      avatar\n                      handle\n                      name\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                  pendingMerge {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    state\n                    createdAt\n                    mergedAt\n                    closedAt\n                    tracking {\n                      size\n                      changedFilesCount\n                      linesAddedCount\n                      linesDeletedCount\n                      timeToFirstReview\n                      timeToMerge\n                      timeToFirstApproval\n                      firstReviewAt\n                      firstApprovalAt\n                    }\n                    author {\n                      id\n                      avatar\n                      handle\n                      name\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Teammates($workspaceId: SweetID!, $handle: String!) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                id\n                teammates {\n                  id\n                  person {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Teammates($workspaceId: SweetID!, $handle: String!) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                id\n                teammates {\n                  id\n                  person {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation UpsertTeam($input: UpsertTeamInput!) {\n            upsertTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        "): (typeof documents)["\n          mutation UpsertTeam($input: UpsertTeamInput!) {\n            upsertTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation ArchiveTeam($input: ArchiveTeamInput!) {\n            archiveTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        "): (typeof documents)["\n          mutation ArchiveTeam($input: ArchiveTeamInput!) {\n            archiveTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation UnarchiveTeam($input: UnarchiveTeamInput!) {\n            unarchiveTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        "): (typeof documents)["\n          mutation UnarchiveTeam($input: UnarchiveTeamInput!) {\n            unarchiveTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query TeamWorkLog(\n            $workspaceId: SweetID!\n            $teamId: SweetID!\n            $input: TeamWorkLogInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                members {\n                  id\n                  role\n                  person {\n                    id\n                    name\n                    handle\n                    avatar\n                  }\n                }\n                workLog(input: $input) {\n                  columns\n                  data {\n                    __typename\n                    ... on CodeReviewSubmittedEvent {\n                      eventAt\n                      codeReview {\n                        id\n                        state\n                        commentCount\n                        createdAt\n                        author {\n                          id\n                          name\n                          handle\n                          avatar\n                        }\n                        pullRequest {\n                          id\n                          title\n                          gitUrl\n                          commentCount\n                          changedFilesCount\n                          linesAddedCount\n                          linesDeletedCount\n                          state\n                          createdAt\n                          mergedAt\n                          closedAt\n                          tracking {\n                            size\n                            changedFilesCount\n                            linesAddedCount\n                            linesDeletedCount\n                            timeToFirstReview\n                            timeToMerge\n                            timeToFirstApproval\n                            firstReviewAt\n                            firstApprovalAt\n                          }\n                          author {\n                            id\n                            avatar\n                            handle\n                            name\n                          }\n                          repository {\n                            id\n                            name\n                            fullName\n                          }\n                        }\n                      }\n                    }\n                    ... on PullRequestCreatedEvent {\n                      eventAt\n                      pullRequest {\n                        id\n                        title\n                        gitUrl\n                        commentCount\n                        changedFilesCount\n                        linesAddedCount\n                        linesDeletedCount\n                        state\n                        createdAt\n                        mergedAt\n                        closedAt\n                        tracking {\n                          size\n                          changedFilesCount\n                          linesAddedCount\n                          linesDeletedCount\n                          timeToFirstReview\n                          timeToMerge\n                          timeToFirstApproval\n                          firstReviewAt\n                          firstApprovalAt\n                        }\n                        author {\n                          id\n                          avatar\n                          handle\n                          name\n                        }\n                        repository {\n                          id\n                          name\n                          fullName\n                        }\n                      }\n                    }\n                    ... on PullRequestMergedEvent {\n                      eventAt\n                      pullRequest {\n                        id\n                        title\n                        gitUrl\n                        commentCount\n                        changedFilesCount\n                        linesAddedCount\n                        linesDeletedCount\n                        state\n                        createdAt\n                        mergedAt\n                        closedAt\n                        tracking {\n                          size\n                          changedFilesCount\n                          linesAddedCount\n                          linesDeletedCount\n                          timeToFirstReview\n                          timeToMerge\n                          timeToFirstApproval\n                          firstReviewAt\n                          firstApprovalAt\n                        }\n                        author {\n                          id\n                          avatar\n                          handle\n                          name\n                        }\n                        repository {\n                          id\n                          name\n                          fullName\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query TeamWorkLog(\n            $workspaceId: SweetID!\n            $teamId: SweetID!\n            $input: TeamWorkLogInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                members {\n                  id\n                  role\n                  person {\n                    id\n                    name\n                    handle\n                    avatar\n                  }\n                }\n                workLog(input: $input) {\n                  columns\n                  data {\n                    __typename\n                    ... on CodeReviewSubmittedEvent {\n                      eventAt\n                      codeReview {\n                        id\n                        state\n                        commentCount\n                        createdAt\n                        author {\n                          id\n                          name\n                          handle\n                          avatar\n                        }\n                        pullRequest {\n                          id\n                          title\n                          gitUrl\n                          commentCount\n                          changedFilesCount\n                          linesAddedCount\n                          linesDeletedCount\n                          state\n                          createdAt\n                          mergedAt\n                          closedAt\n                          tracking {\n                            size\n                            changedFilesCount\n                            linesAddedCount\n                            linesDeletedCount\n                            timeToFirstReview\n                            timeToMerge\n                            timeToFirstApproval\n                            firstReviewAt\n                            firstApprovalAt\n                          }\n                          author {\n                            id\n                            avatar\n                            handle\n                            name\n                          }\n                          repository {\n                            id\n                            name\n                            fullName\n                          }\n                        }\n                      }\n                    }\n                    ... on PullRequestCreatedEvent {\n                      eventAt\n                      pullRequest {\n                        id\n                        title\n                        gitUrl\n                        commentCount\n                        changedFilesCount\n                        linesAddedCount\n                        linesDeletedCount\n                        state\n                        createdAt\n                        mergedAt\n                        closedAt\n                        tracking {\n                          size\n                          changedFilesCount\n                          linesAddedCount\n                          linesDeletedCount\n                          timeToFirstReview\n                          timeToMerge\n                          timeToFirstApproval\n                          firstReviewAt\n                          firstApprovalAt\n                        }\n                        author {\n                          id\n                          avatar\n                          handle\n                          name\n                        }\n                        repository {\n                          id\n                          name\n                          fullName\n                        }\n                      }\n                    }\n                    ... on PullRequestMergedEvent {\n                      eventAt\n                      pullRequest {\n                        id\n                        title\n                        gitUrl\n                        commentCount\n                        changedFilesCount\n                        linesAddedCount\n                        linesDeletedCount\n                        state\n                        createdAt\n                        mergedAt\n                        closedAt\n                        tracking {\n                          size\n                          changedFilesCount\n                          linesAddedCount\n                          linesDeletedCount\n                          timeToFirstReview\n                          timeToMerge\n                          timeToFirstApproval\n                          firstReviewAt\n                          firstApprovalAt\n                        }\n                        author {\n                          id\n                          avatar\n                          handle\n                          name\n                        }\n                        repository {\n                          id\n                          name\n                          fullName\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query UserWorkspaces {\n          userWorkspaces {\n            id\n            name\n            avatar\n            handle\n            gitUninstallUrl\n            me {\n              id\n              handle\n              name\n              avatar\n              email\n            }\n            billing {\n              trial {\n                endAt\n              }\n              subscription {\n                isActive\n              }\n            }\n            isActiveCustomer\n          }\n        }\n      "): (typeof documents)["\n        query UserWorkspaces {\n          userWorkspaces {\n            id\n            name\n            avatar\n            handle\n            gitUninstallUrl\n            me {\n              id\n              handle\n              name\n              avatar\n              email\n            }\n            billing {\n              trial {\n                endAt\n              }\n              subscription {\n                isActive\n              }\n            }\n            isActiveCustomer\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query WorkspaceByInstallationId($gitInstallationId: String!) {\n            workspaceByInstallationId(gitInstallationId: $gitInstallationId) {\n              id\n              name\n              avatar\n              handle\n              gitUninstallUrl\n              isActiveCustomer\n              repositories {\n                id\n              }\n            }\n          }\n        "): (typeof documents)["\n          query WorkspaceByInstallationId($gitInstallationId: String!) {\n            workspaceByInstallationId(gitInstallationId: $gitInstallationId) {\n              id\n              name\n              avatar\n              handle\n              gitUninstallUrl\n              isActiveCustomer\n              repositories {\n                id\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query WorkspaceSyncProgress($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              initialSyncProgress\n            }\n          }\n        "): (typeof documents)["\n          query WorkspaceSyncProgress($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              initialSyncProgress\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query WorkspaceSettings($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              id\n              settings {\n                pullRequest {\n                  size {\n                    tiny\n                    small\n                    medium\n                    large\n                    ignorePatterns\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query WorkspaceSettings($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              id\n              settings {\n                pullRequest {\n                  size {\n                    tiny\n                    small\n                    medium\n                    large\n                    ignorePatterns\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation UpdateWorkspaceSettings(\n            $input: UpdateWorkspaceSettingsInput!\n          ) {\n            updateWorkspaceSettings(input: $input) {\n              id\n              settings {\n                pullRequest {\n                  size {\n                    tiny\n                    small\n                    medium\n                    large\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          mutation UpdateWorkspaceSettings(\n            $input: UpdateWorkspaceSettingsInput!\n          ) {\n            updateWorkspaceSettings(input: $input) {\n              id\n              settings {\n                pullRequest {\n                  size {\n                    tiny\n                    small\n                    medium\n                    large\n                  }\n                }\n              }\n            }\n          }\n        "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;