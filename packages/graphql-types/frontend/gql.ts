/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n          mutation LoginWithGithub($input: LoginWithGithubInput!) {\n            loginWithGithub(input: $input) {\n              token {\n                accessToken\n              }\n            }\n          }\n        ": types.LoginWithGithubDocument,
    "\n          query AuthProvider($input: AuthProviderInput!) {\n            authProvider(input: $input) {\n              redirectUrl\n            }\n          }\n        ": types.AuthProviderDocument,
    "\n          query WorkspaceAutomation(\n            $workspaceId: SweetID!\n            $input: AutomationQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              automation(input: $input) {\n                slug\n                scope\n                enabled\n                title\n                description\n                demoUrl\n                docsUrl\n                color\n                icon\n                benefits {\n                  techDebt\n                  failureRate\n                  security\n                  cycleTime\n                  compliance\n                }\n              }\n            }\n          }\n        ": types.WorkspaceAutomationDocument,
    "\n          query WorkspaceAutomations($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              automations {\n                slug\n                scope\n                enabled\n                title\n                description\n                shortDescription\n                demoUrl\n                docsUrl\n                color\n                icon\n                benefits {\n                  techDebt\n                  failureRate\n                  security\n                  cycleTime\n                  compliance\n                }\n              }\n            }\n          }\n        ": types.WorkspaceAutomationsDocument,
    "\n          mutation UpdateAutomation($input: UpdateAutomationInput!) {\n            updateAutomation(input: $input) {\n              slug\n              enabled\n            }\n          }\n        ": types.UpdateAutomationDocument,
    "\n          query ChartTimeToMerge(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeToMerge {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        ": types.ChartTimeToMergeDocument,
    "\n          query ChartTimeToFirstReview(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeForFirstReview {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        ": types.ChartTimeToFirstReviewDocument,
    "\n          query ChartTimeToApproval(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeForApproval {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        ": types.ChartTimeToApprovalDocument,
    "\n          query ChartCycleTime(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                cycleTime {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        ": types.ChartCycleTimeDocument,
    "\n          query PullRequestSizeDistribution(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                pullRequestSizeDistribution {\n                  columns\n                  series {\n                    name\n                    data\n                    color\n                  }\n                }\n              }\n            }\n          }\n        ": types.PullRequestSizeDistributionDocument,
    "\n          query ChartCodeReviewDistribution(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                codeReviewDistribution {\n                  entities {\n                    id\n                    name\n                    image\n                    reviewCount\n                    reviewSharePercentage\n                  }\n                  links {\n                    source\n                    target\n                    value\n                  }\n                  totalReviews\n                }\n              }\n            }\n          }\n        ": types.ChartCodeReviewDistributionDocument,
    "\n          query PersonCodeReviews(\n            $workspaceId: SweetID!\n            $handle: String!\n            $input: CodeReviewsInput\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                codeReviews(input: $input) {\n                  id\n                  state\n                  commentCount\n                  createdAt\n                  author {\n                    id\n                    name\n                    handle\n                    avatar\n                  }\n                  pullRequest {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    tracking {\n                      size\n                      firstReviewAt\n                      timeToFirstReview\n                    }\n                    author {\n                      id\n                      name\n                      handle\n                      avatar\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        ": types.PersonCodeReviewsDocument,
    "\n          query People($workspaceId: SweetID!, $input: PeopleQueryInput) {\n            workspace(workspaceId: $workspaceId) {\n              people(input: $input) {\n                id\n                name\n                handle\n                avatar\n              }\n            }\n          }\n        ": types.PeopleDocument,
    "\n          query Person($workspaceId: SweetID!, $handle: String!) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                id\n                name\n                handle\n                avatar\n                teamMemberships {\n                  id\n                  role\n                  team {\n                    id\n                    name\n                    icon\n                  }\n                }\n              }\n            }\n          }\n        ": types.PersonDocument,
    "\n          query PersonalMetrics($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              me {\n                personalMetrics {\n                  pullRequestSize {\n                    current\n                    previous\n                    change\n                  }\n                  codeReviewAmount {\n                    current\n                    previous\n                    change\n                  }\n                }\n              }\n            }\n          }\n        ": types.PersonalMetricsDocument,
    "\n          query PullRequests(\n            $workspaceId: SweetID!\n            $input: PullRequestsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              pullRequests(input: $input) {\n                id\n                title\n                gitUrl\n                commentCount\n                changedFilesCount\n                linesAddedCount\n                linesDeletedCount\n                state\n                createdAt\n                mergedAt\n                closedAt\n                tracking {\n                  size\n                  timeToFirstReview\n                  timeToMerge\n                  timeToFirstApproval\n                  firstReviewAt\n                }\n                author {\n                  id\n                  avatar\n                  handle\n                  name\n                }\n                repository {\n                  id\n                  name\n                  fullName\n                }\n              }\n            }\n          }\n        ": types.PullRequestsDocument,
    "\n          query Repositories($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              repositories {\n                id\n                name\n                fullName\n              }\n            }\n          }\n        ": types.RepositoriesDocument,
    "\n          query Spotlight(\n            $workspaceId: SweetID!\n            $peopleInput: PeopleQueryInput!\n            $teamsInput: TeamsQueryInput!\n            $repositoriesInput: RepositoriesQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              people(input: $peopleInput) {\n                id\n                avatar\n                handle\n                name\n              }\n              teams(input: $teamsInput) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n              }\n              repositories(input: $repositoriesInput) {\n                id\n                name\n                fullName\n              }\n            }\n          }\n        ": types.SpotlightDocument,
    "\n          query Teams($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              teams {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n                archivedAt\n                members {\n                  id\n                  person {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                }\n              }\n            }\n          }\n        ": types.TeamsDocument,
    "\n          query Team($workspaceId: SweetID!, $teamId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n                archivedAt\n                members {\n                  id\n                  role\n                  person {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                }\n              }\n            }\n          }\n        ": types.TeamDocument,
    "\n          query Teammates($workspaceId: SweetID!, $handle: String!) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                id\n                teammates {\n                  id\n                  person {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        ": types.TeammatesDocument,
    "\n          mutation UpsertTeam($input: UpsertTeamInput!) {\n            upsertTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        ": types.UpsertTeamDocument,
    "\n          mutation ArchiveTeam($input: ArchiveTeamInput!) {\n            archiveTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        ": types.ArchiveTeamDocument,
    "\n          mutation UnarchiveTeam($input: UnarchiveTeamInput!) {\n            unarchiveTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        ": types.UnarchiveTeamDocument,
    "\n        query UserWorkspaces {\n          userWorkspaces {\n            id\n            name\n            avatar\n            handle\n            gitUninstallUrl\n            me {\n              id\n              handle\n              name\n              avatar\n              email\n            }\n          }\n        }\n      ": types.UserWorkspacesDocument,
    "\n          query WorkspaceByInstallationId($gitInstallationId: String!) {\n            workspaceByInstallationId(gitInstallationId: $gitInstallationId) {\n              id\n              name\n              avatar\n              handle\n              gitUninstallUrl\n              repositories {\n                id\n              }\n            }\n          }\n        ": types.WorkspaceByInstallationIdDocument,
    "\n          query WorkspaceSyncProgress($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              initialSyncProgress\n            }\n          }\n        ": types.WorkspaceSyncProgressDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation LoginWithGithub($input: LoginWithGithubInput!) {\n            loginWithGithub(input: $input) {\n              token {\n                accessToken\n              }\n            }\n          }\n        "): (typeof documents)["\n          mutation LoginWithGithub($input: LoginWithGithubInput!) {\n            loginWithGithub(input: $input) {\n              token {\n                accessToken\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query AuthProvider($input: AuthProviderInput!) {\n            authProvider(input: $input) {\n              redirectUrl\n            }\n          }\n        "): (typeof documents)["\n          query AuthProvider($input: AuthProviderInput!) {\n            authProvider(input: $input) {\n              redirectUrl\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query WorkspaceAutomation(\n            $workspaceId: SweetID!\n            $input: AutomationQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              automation(input: $input) {\n                slug\n                scope\n                enabled\n                title\n                description\n                demoUrl\n                docsUrl\n                color\n                icon\n                benefits {\n                  techDebt\n                  failureRate\n                  security\n                  cycleTime\n                  compliance\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query WorkspaceAutomation(\n            $workspaceId: SweetID!\n            $input: AutomationQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              automation(input: $input) {\n                slug\n                scope\n                enabled\n                title\n                description\n                demoUrl\n                docsUrl\n                color\n                icon\n                benefits {\n                  techDebt\n                  failureRate\n                  security\n                  cycleTime\n                  compliance\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query WorkspaceAutomations($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              automations {\n                slug\n                scope\n                enabled\n                title\n                description\n                shortDescription\n                demoUrl\n                docsUrl\n                color\n                icon\n                benefits {\n                  techDebt\n                  failureRate\n                  security\n                  cycleTime\n                  compliance\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query WorkspaceAutomations($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              automations {\n                slug\n                scope\n                enabled\n                title\n                description\n                shortDescription\n                demoUrl\n                docsUrl\n                color\n                icon\n                benefits {\n                  techDebt\n                  failureRate\n                  security\n                  cycleTime\n                  compliance\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation UpdateAutomation($input: UpdateAutomationInput!) {\n            updateAutomation(input: $input) {\n              slug\n              enabled\n            }\n          }\n        "): (typeof documents)["\n          mutation UpdateAutomation($input: UpdateAutomationInput!) {\n            updateAutomation(input: $input) {\n              slug\n              enabled\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query ChartTimeToMerge(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeToMerge {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query ChartTimeToMerge(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeToMerge {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query ChartTimeToFirstReview(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeForFirstReview {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query ChartTimeToFirstReview(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeForFirstReview {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query ChartTimeToApproval(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeForApproval {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query ChartTimeToApproval(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                timeForApproval {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query ChartCycleTime(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                cycleTime {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query ChartCycleTime(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                cycleTime {\n                  columns\n                  data\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query PullRequestSizeDistribution(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                pullRequestSizeDistribution {\n                  columns\n                  series {\n                    name\n                    data\n                    color\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query PullRequestSizeDistribution(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                pullRequestSizeDistribution {\n                  columns\n                  series {\n                    name\n                    data\n                    color\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query ChartCodeReviewDistribution(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                codeReviewDistribution {\n                  entities {\n                    id\n                    name\n                    image\n                    reviewCount\n                    reviewSharePercentage\n                  }\n                  links {\n                    source\n                    target\n                    value\n                  }\n                  totalReviews\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query ChartCodeReviewDistribution(\n            $workspaceId: SweetID!\n            $chartInput: ChartInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              charts(input: $chartInput) {\n                codeReviewDistribution {\n                  entities {\n                    id\n                    name\n                    image\n                    reviewCount\n                    reviewSharePercentage\n                  }\n                  links {\n                    source\n                    target\n                    value\n                  }\n                  totalReviews\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query PersonCodeReviews(\n            $workspaceId: SweetID!\n            $handle: String!\n            $input: CodeReviewsInput\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                codeReviews(input: $input) {\n                  id\n                  state\n                  commentCount\n                  createdAt\n                  author {\n                    id\n                    name\n                    handle\n                    avatar\n                  }\n                  pullRequest {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    tracking {\n                      size\n                      firstReviewAt\n                      timeToFirstReview\n                    }\n                    author {\n                      id\n                      name\n                      handle\n                      avatar\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query PersonCodeReviews(\n            $workspaceId: SweetID!\n            $handle: String!\n            $input: CodeReviewsInput\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                codeReviews(input: $input) {\n                  id\n                  state\n                  commentCount\n                  createdAt\n                  author {\n                    id\n                    name\n                    handle\n                    avatar\n                  }\n                  pullRequest {\n                    id\n                    title\n                    gitUrl\n                    commentCount\n                    changedFilesCount\n                    linesAddedCount\n                    linesDeletedCount\n                    tracking {\n                      size\n                      firstReviewAt\n                      timeToFirstReview\n                    }\n                    author {\n                      id\n                      name\n                      handle\n                      avatar\n                    }\n                    repository {\n                      id\n                      name\n                      fullName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query People($workspaceId: SweetID!, $input: PeopleQueryInput) {\n            workspace(workspaceId: $workspaceId) {\n              people(input: $input) {\n                id\n                name\n                handle\n                avatar\n              }\n            }\n          }\n        "): (typeof documents)["\n          query People($workspaceId: SweetID!, $input: PeopleQueryInput) {\n            workspace(workspaceId: $workspaceId) {\n              people(input: $input) {\n                id\n                name\n                handle\n                avatar\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Person($workspaceId: SweetID!, $handle: String!) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                id\n                name\n                handle\n                avatar\n                teamMemberships {\n                  id\n                  role\n                  team {\n                    id\n                    name\n                    icon\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Person($workspaceId: SweetID!, $handle: String!) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                id\n                name\n                handle\n                avatar\n                teamMemberships {\n                  id\n                  role\n                  team {\n                    id\n                    name\n                    icon\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query PersonalMetrics($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              me {\n                personalMetrics {\n                  pullRequestSize {\n                    current\n                    previous\n                    change\n                  }\n                  codeReviewAmount {\n                    current\n                    previous\n                    change\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query PersonalMetrics($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              me {\n                personalMetrics {\n                  pullRequestSize {\n                    current\n                    previous\n                    change\n                  }\n                  codeReviewAmount {\n                    current\n                    previous\n                    change\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query PullRequests(\n            $workspaceId: SweetID!\n            $input: PullRequestsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              pullRequests(input: $input) {\n                id\n                title\n                gitUrl\n                commentCount\n                changedFilesCount\n                linesAddedCount\n                linesDeletedCount\n                state\n                createdAt\n                mergedAt\n                closedAt\n                tracking {\n                  size\n                  timeToFirstReview\n                  timeToMerge\n                  timeToFirstApproval\n                  firstReviewAt\n                }\n                author {\n                  id\n                  avatar\n                  handle\n                  name\n                }\n                repository {\n                  id\n                  name\n                  fullName\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query PullRequests(\n            $workspaceId: SweetID!\n            $input: PullRequestsQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              pullRequests(input: $input) {\n                id\n                title\n                gitUrl\n                commentCount\n                changedFilesCount\n                linesAddedCount\n                linesDeletedCount\n                state\n                createdAt\n                mergedAt\n                closedAt\n                tracking {\n                  size\n                  timeToFirstReview\n                  timeToMerge\n                  timeToFirstApproval\n                  firstReviewAt\n                }\n                author {\n                  id\n                  avatar\n                  handle\n                  name\n                }\n                repository {\n                  id\n                  name\n                  fullName\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Repositories($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              repositories {\n                id\n                name\n                fullName\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Repositories($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              repositories {\n                id\n                name\n                fullName\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Spotlight(\n            $workspaceId: SweetID!\n            $peopleInput: PeopleQueryInput!\n            $teamsInput: TeamsQueryInput!\n            $repositoriesInput: RepositoriesQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              people(input: $peopleInput) {\n                id\n                avatar\n                handle\n                name\n              }\n              teams(input: $teamsInput) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n              }\n              repositories(input: $repositoriesInput) {\n                id\n                name\n                fullName\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Spotlight(\n            $workspaceId: SweetID!\n            $peopleInput: PeopleQueryInput!\n            $teamsInput: TeamsQueryInput!\n            $repositoriesInput: RepositoriesQueryInput!\n          ) {\n            workspace(workspaceId: $workspaceId) {\n              people(input: $peopleInput) {\n                id\n                avatar\n                handle\n                name\n              }\n              teams(input: $teamsInput) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n              }\n              repositories(input: $repositoriesInput) {\n                id\n                name\n                fullName\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Teams($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              teams {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n                archivedAt\n                members {\n                  id\n                  person {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Teams($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              teams {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n                archivedAt\n                members {\n                  id\n                  person {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Team($workspaceId: SweetID!, $teamId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n                archivedAt\n                members {\n                  id\n                  role\n                  person {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Team($workspaceId: SweetID!, $teamId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              team(teamId: $teamId) {\n                id\n                name\n                description\n                icon\n                startColor\n                endColor\n                archivedAt\n                members {\n                  id\n                  role\n                  person {\n                    id\n                    avatar\n                    handle\n                    name\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query Teammates($workspaceId: SweetID!, $handle: String!) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                id\n                teammates {\n                  id\n                  person {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        "): (typeof documents)["\n          query Teammates($workspaceId: SweetID!, $handle: String!) {\n            workspace(workspaceId: $workspaceId) {\n              person(handle: $handle) {\n                id\n                teammates {\n                  id\n                  person {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation UpsertTeam($input: UpsertTeamInput!) {\n            upsertTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        "): (typeof documents)["\n          mutation UpsertTeam($input: UpsertTeamInput!) {\n            upsertTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation ArchiveTeam($input: ArchiveTeamInput!) {\n            archiveTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        "): (typeof documents)["\n          mutation ArchiveTeam($input: ArchiveTeamInput!) {\n            archiveTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation UnarchiveTeam($input: UnarchiveTeamInput!) {\n            unarchiveTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        "): (typeof documents)["\n          mutation UnarchiveTeam($input: UnarchiveTeamInput!) {\n            unarchiveTeam(input: $input) {\n              id\n              name\n              description\n              icon\n              startColor\n              endColor\n              archivedAt\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query UserWorkspaces {\n          userWorkspaces {\n            id\n            name\n            avatar\n            handle\n            gitUninstallUrl\n            me {\n              id\n              handle\n              name\n              avatar\n              email\n            }\n          }\n        }\n      "): (typeof documents)["\n        query UserWorkspaces {\n          userWorkspaces {\n            id\n            name\n            avatar\n            handle\n            gitUninstallUrl\n            me {\n              id\n              handle\n              name\n              avatar\n              email\n            }\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query WorkspaceByInstallationId($gitInstallationId: String!) {\n            workspaceByInstallationId(gitInstallationId: $gitInstallationId) {\n              id\n              name\n              avatar\n              handle\n              gitUninstallUrl\n              repositories {\n                id\n              }\n            }\n          }\n        "): (typeof documents)["\n          query WorkspaceByInstallationId($gitInstallationId: String!) {\n            workspaceByInstallationId(gitInstallationId: $gitInstallationId) {\n              id\n              name\n              avatar\n              handle\n              gitUninstallUrl\n              repositories {\n                id\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          query WorkspaceSyncProgress($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              initialSyncProgress\n            }\n          }\n        "): (typeof documents)["\n          query WorkspaceSyncProgress($workspaceId: SweetID!) {\n            workspace(workspaceId: $workspaceId) {\n              initialSyncProgress\n            }\n          }\n        "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;